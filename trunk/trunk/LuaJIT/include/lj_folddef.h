/* This is a generated file. DO NOT EDIT! */

static const FoldFunc fold_func[] = {
  fold_kfold_numarith,
  fold_kfold_fpmath,
  fold_kfold_powi,
  fold_kfold_intarith,
  fold_kfold_bnot,
  fold_kfold_bswap,
  fold_kfold_tonum,
  fold_kfold_tobit,
  fold_kfold_toint,
  fold_kfold_tostr_knum,
  fold_kfold_tostr_kint,
  fold_kfold_strto,
  fold_kfold_snew,
  fold_kfold_numcomp,
  fold_kfold_intcomp,
  fold_kfold_strcomp,
  lj_opt_cse,
  fold_kfold_kref,
  fold_shortcut_round,
  fold_shortcut_left,
  fold_shortcut_dropleft,
  fold_shortcut_leftleft,
  fold_shortcut_leftleft_toint,
  fold_shortcut_leftleft_across_phi,
  fold_simplify_numadd_negx,
  fold_simplify_numadd_xneg,
  fold_simplify_numsub_k,
  fold_simplify_numsub_negk,
  fold_simplify_numsub_xneg,
  fold_simplify_nummuldiv_k,
  fold_simplify_nummuldiv_negk,
  fold_simplify_nummuldiv_negneg,
  fold_simplify_powi_xk,
  fold_simplify_powi_kx,
  fold_narrow_convert,
  fold_cse_toint,
  fold_simplify_intadd_k,
  fold_simplify_intsub_k,
  fold_simplify_intsub,
  fold_simplify_intsubadd_leftcancel,
  fold_simplify_intsubsub_leftcancel,
  fold_simplify_intsubsub_rightcancel,
  fold_simplify_intsubadd_rightcancel,
  fold_simplify_intsubaddadd_cancel,
  fold_simplify_band_k,
  fold_simplify_bor_k,
  fold_simplify_bxor_k,
  fold_simplify_shift_ik,
  fold_simplify_shift_andk,
  fold_simplify_shift1_ki,
  fold_simplify_shift2_ki,
  fold_reassoc_intarith_k,
  fold_reassoc_dup,
  fold_reassoc_bxor,
  fold_reassoc_shift,
  fold_reassoc_minmax_k,
  fold_reassoc_minmax_left,
  fold_reassoc_minmax_right,
  fold_reassoc_abc,
  fold_comm_swap,
  fold_comm_equal,
  fold_comm_comp,
  fold_comm_dup,
  fold_comm_bxor,
  fold_merge_eqne_snew_kgc,
  lj_opt_fwd_aload,
  lj_opt_fwd_hload,
  lj_opt_fwd_uload,
  lj_opt_fwd_tlen,
  fold_cse_uref,
  fold_cse_href,
  fold_fload_tab_tnew_asize,
  fold_fload_tab_tnew_hmask,
  fold_fload_tab_tdup_asize,
  fold_fload_tab_tdup_hmask,
  fold_fload_tab_ah,
  fold_fload_str_len,
  lj_opt_cse,
  lj_opt_fwd_fload,
  fold_fwd_sload,
  fold_xload_str,
  fold_barrier_tab,
  fold_barrier_tnew_tdup,
  lj_opt_dse_ahstore,
  lj_opt_dse_ustore,
  lj_opt_dse_fstore,
  fold_store_raw
};

static const uint32_t fold_hash[432] = {
0x0d110a0a,
0x174a480a,
0x0e120606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x1922ff28,
0x3e1bffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2422ff06,
0x224a230a,
0xffffffff,
0xffffffff,
0x3d13ffff,
0xffffffff,
0xffffffff,
0x4a3b4406,
0xffffffff,
0x2c1aff06,
0x3021ff1a,
0xffffffff,
0x224a220a,
0xffffffff,
0xffffffff,
0x00280a0a,
0xffffffff,
0xffffffff,
0x110cff09,
0x1329290a,
0x483b4306,
0xffffffff,
0xffffffff,
0x4632ffff,
0xffffffff,
0xffffffff,
0x03210606,
0x4138ff00,
0x4b3bff05,
0xffffffff,
0x3a0eff22,
0x1429280a,
0xffffffff,
0x04180600,
0xffffffff,
0x182228ff,
0xffffffff,
0x331c1c06,
0x16484900,
0xffffffff,
0x282323ff,
0x3b22ffff,
0x0d100a0a,
0xffffffff,
0x0e110606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x3e1affff,
0x2349ffff,
0x272322ff,
0xffffffff,
0xffffffff,
0x2f21ff06,
0xffffffff,
0xffffffff,
0x2923ff23,
0x3d12ffff,
0x5541ffff,
0xffffffff,
0x12262601,
0xffffffff,
0xffffffff,
0x3020ff1a,
0x33222206,
0x322106ff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x351c1cff,
0x02270a06,
0xffffffff,
0x03200606,
0xffffffff,
0xffffffff,
0xffffffff,
0x13264801,
0x1528280a,
0xffffffff,
0x0d170a0a,
0xffffffff,
0xffffffff,
0xffffffff,
0x174948ff,
0xffffffff,
0x503d37ff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x0e100606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x331b1b06,
0x224923ff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2f20ff06,
0xffffffff,
0xffffffff,
0xffffffff,
0x3d11ffff,
0x5440ffff,
0xffffffff,
0x493b4405,
0x224922ff,
0x5146ff00,
0x301fff1a,
0x21270aff,
0x322006ff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x473b4305,
0xffffffff,
0xffffffff,
0xffffffff,
0x36212106,
0xffffffff,
0xffffffff,
0x031f0606,
0xffffffff,
0x4b3bff04,
0xffffffff,
0xffffffff,
0xffffffff,
0x110d0707,
0x0d160a0a,
0xffffffff,
0x0e170606,
0x341b1bff,
0x242fff06,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2027ff06,
0xffffffff,
0xffffffff,
0xffffffff,
0x100d3b09,
0x5147ffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2f1fff06,
0xffffffff,
0xffffffff,
0xffffffff,
0x3d10ffff,
0x533fffff,
0x331a1a06,
0x002d0a0a,
0x12262600,
0x4445ff00,
0x301eff1a,
0x01260aff,
0x321f06ff,
0x0b4c0700,
0xffffffff,
0x00250a0a,
0x15191900,
0x372d2d0a,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x392cff2d,
0x262fffff,
0xffffffff,
0xffffffff,
0x031e0606,
0xffffffff,
0xffffffff,
0xffffffff,
0x13264800,
0xffffffff,
0x110c0707,
0x094b0a00,
0x0d150a0a,
0x0e160606,
0x36202006,
0x242eff06,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x0d0d0a0a,
0x52464400,
0x0e0e0606,
0x0c423706,
0xffffffff,
0x341a1aff,
0xffffffff,
0xffffffff,
0x100c3b09,
0x3d17ffff,
0xffffffff,
0xffffffff,
0x52464300,
0x2f1eff06,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x533effff,
0x002c0a0a,
0xffffffff,
0x5644ff00,
0xffffffff,
0x301dff1a,
0xffffffff,
0x311e06ff,
0x342d2dff,
0xffffffff,
0x00240a0a,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x392dff2c,
0x0f130707,
0x3b2effff,
0x382d2cff,
0x0a4b0600,
0x031d0606,
0x15181800,
0x453507ff,
0x372c2c0a,
0x1e25280a,
0x4c3b0700,
0x0d140a0a,
0x1f252828,
0x0e150606,
0xffffffff,
0x1d25ff0a,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x0d0c0a0a,
0xffffffff,
0x110d0606,
0xffffffff,
0xffffffff,
0x361f1f06,
0xffffffff,
0x110d09ff,
0x3d16ffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2f1dff06,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x002b0a0a,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x311d06ff,
0x382c2dff,
0xffffffff,
0x00230a0a,
0xffffffff,
0x4d3bff00,
0xffffffff,
0xffffffff,
0xffffffff,
0x400d4207,
0xffffffff,
0x0f120707,
0x3e2dffff,
0x342c2cff,
0x074a0a0a,
0x031c0606,
0x453407ff,
0xffffffff,
0xffffffff,
0x1e24280a,
0xffffffff,
0x0d130a0a,
0x1f242828,
0x0e140606,
0xffffffff,
0x1d24ff0a,
0x2a23ff22,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x110c0606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x110c09ff,
0x3d15ffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2e1cff06,
0xffffffff,
0xffffffff,
0xffffffff,
0x3c0dffff,
0x361e1e06,
0x4f3cffff,
0x002a0a0a,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x5134ffff,
0x00220a0a,
0xffffffff,
0x03230606,
0x433aff00,
0x4b3bff06,
0xffffffff,
0x400c4207,
0xffffffff,
0x0f110707,
0x3e2cffff,
0xffffffff,
0x031b0606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x1b23280a,
0x3b24ffff,
0x0d120a0a,
0xffffffff,
0x0e130606,
0xffffffff,
0x1a23ff0a,
0xffffffff,
0xffffffff,
0x1c23ff28,
0x3f1cffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2523ff06,
0xffffffff,
0xffffffff,
0x2b232222,
0x3d14ffff,
0x5643ffff,
0xffffffff,
0x12262602,
0xffffffff,
0x2d1bff06,
0xffffffff,
0xffffffff,
0xffffffff,
0x3c0cffff,
0x4e3bffff,
0x00290a0a,
0xffffffff,
0x4b3bff03,
0x110dff09,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x5633ffff,
0xffffffff,
0x361d1d06,
0x03220606,
0x4239ff00,
0xffffffff,
0x08490aff,
0x13264802,
0xffffffff,
0x0f100707,
0x05190600,
0x06480600,
0x031a0606,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0xffffffff,
0x2623ffff,
0xffffffff
};

#define fold_hashkey(k)	(((((k)<<20)-(k))<<7)%431)

